   // MARK: –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ

/// 1. –£ –Ω–∞—Å –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å "–ê—Ä—Ç–∏—Å—Ç" –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è. –ò –µ—Å—Ç—å –º–µ—Ç–æ–¥ "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ". –£ –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–≤–æ–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ: —Ç–∞–Ω—Ü–æ—Ä —Ç–∞–Ω—Ü—É–µ—Ç, –ø–µ–≤–µ—Ü –ø–æ–µ—Ç –∏ —Ç–¥. –ê –¥–ª—è —Ö—É–¥–æ–∂–Ω–∏–∫–∞, —á—Ç–æ –±—ã –≤—ã –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å —Å—Ç–∞–≤–∏—Ç—å, –ø—É—Å—Ç—å –æ–Ω —Å—Ç–∞–≤–∏—Ç —á—Ç–æ-—Ç–æ —Å–≤–æ–µ (–ø—É—Å—Ç—å –º–µ–Ω—è–µ—Ç –∏–º—è –Ω–∞ —Å–≤–æ–µ –∞—Ä—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ). –ö–æ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ "–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ" –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∞—Ä—Ç–∏—Å—Ç–∞ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ —Å–∞–º–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ.
// –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∞—Ä—Ç–∏—Å—Ç–æ–≤. –ü–æ–ª–æ–∂–∏—Ç—å –∏—Ö –≤—Å–µ—Ö –≤ –º–∞—Å—Å–∏–≤, –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –Ω–µ–º—É –∏ –≤—ã–∑–≤–∞—Ç—å –∏—Ö –º–µ—Ç–æ–¥ "–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ"

class Artist {
    var name : String = ""
    var surname : String = ""
    var performanceType : String {
        return "perform"
    }
    
    func performance () -> () {
        print("\(name) \(surname) will \(performanceType) for us")
    }

}

class Painter : Artist {
    override var name : String {
        didSet {
            super.name = super.name.uppercased() + " üë©‚Äçüé®"
        }
    }
    
    override var surname: String {
        didSet {
            super.surname = ""
        }
    }
    
    override var performanceType : String {
        return "paint"
    }

}

class Musician : Artist {
    override var performanceType : String {
        return "sing"
    }
}

class Dancer : Artist {
    override var performanceType : String {
        return "dance"
    }
}

let artist = Artist()
artist.name = "Dmitry"
artist.surname = "Lazarev"

let painter = Painter()
painter.name = "Grigory"
painter.surname = "Slivkon"

let musician = Musician()
musician.name = "Philipp"
musician.surname = "Gorbachev"

let dancer = Dancer()
dancer.name = "Le"
dancer.surname = "Twin"

let artists : [Artist] = [artist, painter, musician, dancer]

for artist in artists {
    artist.performance()
}

/// –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ" –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–ø–µ—Ä—Ç–∏: —Å–∫–æ—Ä–æ—Å—Ç—å, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (computed).
///  –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∏—Ö –∫–æ–º–ø—é—Ç–µ–¥ –ø—Ä–æ–ø–µ—Ä—Ç–∏ —É –≤—Å–µ—Ö. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å–∞–º–æ–ª–µ—Ç, –∫–æ—Ä–∞–±–ª—å, –≤–µ—Ä—Ç–æ–ª–µ—Ç, –º–∞—à–∏–Ω–∞ –∏ —É –∫–∞–∂–¥–æ–≥–æ –ø–æ –æ–¥–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É. –í –∫–æ–º–ø—é—Ç–µ–¥ –ø—Ä–æ–ø–µ—Ä—Ç–∏—Å –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏. +
///  —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–≤–æ–π –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —É–π–¥–µ—Ç –¥–µ–Ω–µ–≥ –∏ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∏–∑ –ø—É–Ω–∫—Ç–∞ –ê –≤ –ø—É–Ω–∫—Ç –í –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–∏—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤. –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–∞–∫ –±—ã—Å—Ç—Ä–æ —Å–º–æ–∂–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–∑–æ–∫).
/// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º


class Vehicle {
    var speed = 0
    var capacity = 0
    var costForOneTransopting : Int {
        return 0
    }
    
    // —Ñ—É–Ω–∫—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫–æ-–º—É—Ç–æ –∫–æ–ª-–≤—É –ª—é–¥–µ–π –∏–∑ —Ç–æ—á–∫–∏ –ê –≤ —Ç–æ—á–∫—É –ë
    func howManyTimeAndCostFromA(_ a: Double, toB b: Double, amountOfPeople: Double) -> (time: Double, cost: Double) {
        // —Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ —Ä–∞–∑, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –µ—Ö–∞—Ç—å
        let timesToRide = ceil(amountOfPeople / Double(self.capacity))
        // —Å—á–∏—Ç–∞–µ–º –¥–∏—Å—Ç–∞—Ü–∏—é –º–µ–∂–¥—É –∞ –∏ –±
        let distance = b - a
        // —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –æ–¥–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏
        let timeForOneTrip = distance / Double(self.speed)
        // —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫
        let timeForWholeTrip = timeForOneTrip * timesToRide
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫ –æ–∫—Ä—É–≥–µ–Ω–Ω–æ–µ –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
        return (time: ceil(timeForWholeTrip), cost: (timesToRide * Double(costForOneTransopting)))
    }
    
    
}

class Plane : Vehicle {
    var name = "plane"
    override var costForOneTransopting : Int {
        return 300 * capacity
    }
}

var plane = Plane()
plane.speed = 300
plane.capacity = 50
plane.costForOneTransopting
plane.howManyTimeAndCostFromA(0, toB: 24, amountOfPeople: 24)


class Helicopter : Vehicle {
    var name = "helicopter"
    override var costForOneTransopting : Int {
        return 700 * capacity
    }
}

var helicopter = Helicopter()
helicopter.speed = 150
helicopter.capacity = 6


class Car : Vehicle {
    var name = "car"
    override var costForOneTransopting : Int {
        return 300
    }
}

var car = Car()
car.speed = 100
car.capacity = 4


// –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –º–∞—Å—Å–∏–≤
var vehicles = [plane, helicopter, car]

// –ø–æ–¥—Å—á–µ—Ç –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª-–≤–∞ –ª—é–¥–µ–π
var a: Double = 0
var b: Double = 500
var amountOfPeople: Double = 1000

// –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–∏–º –±—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ –≤—Å–µ–≥–æ
var fastest : Vehicle? = nil
var cheapest : Vehicle? = nil

// —Å—á–∏—Ç–∞–µ–º
for vehicle in vehicles {
    if fastest == nil {
        fastest = vehicle
    }
    if vehicle.howManyTimeAndCostFromA(a, toB: b, amountOfPeople: amountOfPeople).time < fastest!.howManyTimeAndCostFromA(a, toB: b, amountOfPeople: amountOfPeople).time {
        fastest = vehicle
    }
}
fastest // —Å–∞–º–æ–ª—ë—Ç–æ–º –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ

for vehicle in vehicles {
    if cheapest == nil {
        cheapest = vehicle
    }
    if vehicle.howManyTimeAndCostFromA(a, toB: b, amountOfPeople: amountOfPeople).cost < cheapest!.howManyTimeAndCostFromA(a, toB: b, amountOfPeople: amountOfPeople).cost {
        cheapest = vehicle
    }
}
cheapest // –º–∞—à–∏–Ω–æ–π –¥–µ—à–µ–≤–ª–µ –≤—Å–µ–≥–æ








/// –ï—Å—Ç—å 5 –∫–ª–∞—Å—Å–æ–≤: –ª—é–¥–∏, –∫—Ä–æ–∫–æ–¥–∏–ª—ã, –æ–±–µ–∑—å—è–Ω—ã, —Å–æ–±–∞–∫–∏, –∂–∏—Ä–∞—Ñ—ã. (–≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–ª–∞—Å—Å—ã, –∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∏ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ 5).
/// - –°–æ–∑–¥–∞–π—Ç–µ –ø–æ –ø–∞—Ä—É –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞.
/// - –ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–µ—Å–º—ã–∫–∞—é—â–∏—Ö—Å—è (—Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤, –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –ø—Ä–µ—Å–º—ã–∫–∞—é—â–∏—Ö—Å—è –∏ —Å–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º –æ–±—ä–µ–∫—Ç–æ–≤)
/// - –°–∫–æ–ª—å–∫–æ —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö?
/// - –°–∫–æ–ª—å–∫–æ –∑–¥–µ—Å—å –∂–∏–≤–æ—Ç–Ω—ã—Ö?
/// - –°–∫–æ–ª—å–∫–æ –∂–∏–≤—ã—Ö —Å—É—â–µ—Å—Ç–≤?

class Alives {
    var name = ""
    
    var isReptile : Bool {
        return false
    }
    var legs : Int {
        return 2
    }
    var isAnimal : Bool {
        return false
    }
}

class Humans : Alives {
    
}

class Aligators : Alives {
    override var isReptile : Bool {
        return true
    }

    override var legs : Int {
        return 4
    }
    
    override var isAnimal: Bool {
        return true
    }
}

class Monkeys : Alives {
    override var isAnimal: Bool {
        return true
    }

}


class Dogs : Alives {
    
    override var legs : Int {
        return 4
    }
    override var isAnimal: Bool {
        return true
    }

}

class Giraffes : Alives {
    override var legs : Int {
        return 4
    }

    override var isAnimal: Bool {
        return true
    }
}

let human1 = Humans()
human1.name = "Georgiy"
let human2 = Humans()
human2.name = "Nastya"

let aligator1 = Aligators()
let aligator2 = Aligators()

let monkey1 = Monkeys()
let monkey2 = Monkeys()

let dog1 = Dogs()
dog1.name = "pushok"

let dog2 = Dogs()
dog2.name = "dvornyaga"

let giraffe1 = Giraffes()
let giraffe2 = Giraffes()

let alivesArray = [human1, human2, aligator1, aligator2, monkey1, monkey2, dog1, dog2, giraffe1, giraffe2]

// - –°–∫–æ–ª—å–∫–æ –∂–∏–≤—ã—Ö —Å—É—â–µ—Å—Ç–≤?
print("–ñ–∏–≤—ã—Ö —Å—É—â–µ—Å—Ç–≤ —Ç—É—Ç \(alivesArray.count)")

/// ‚Äì –ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –ø—Ä–µ—Å–º—ã–∫–∞—é—â–∏—Ö—Å—è (—Å–æ–∑–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤, –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç—É–¥–∞ –ø—Ä–µ—Å–º—ã–∫–∞—é—â–∏—Ö—Å—è –∏ —Å–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º –æ–±—ä–µ–∫—Ç–æ–≤)
var reptiles = 0
for alive in alivesArray {
    if alive.isReptile {
        reptiles += 1
    }
}
print("–†–µ–ø—Ç–∏–ª–∏–π —Ç—É—Ç \(reptiles)")

/// - –°–∫–æ–ª—å–∫–æ —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö?
var fourLegsAlives = 0
for alive in alivesArray {
    if alive.legs == 4 {
        fourLegsAlives += 1
    }
}

print("–ß–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö —Ç—É—Ç \(fourLegsAlives)")

/// - –°–∫–æ–ª—å–∫–æ –∑–¥–µ—Å—å –∂–∏–≤–æ—Ç–Ω—ã—Ö?
var animals = 0
for alive in alivesArray {
    if alive.isAnimal {
        animals += 1
    }
}

print("–ñ–∏–≤–æ—Ç–Ω—ã—Ö —Ç—É—Ç \(animals), –∞ –µ—Å–ª–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, —Ç–æ \(alivesArray.count)")
