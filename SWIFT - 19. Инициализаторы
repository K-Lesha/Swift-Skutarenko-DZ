                                   // MARK: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

    // –≤ –ø—Ä–æ—à–ª–æ–π –î–ó –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –∑–Ω–∞–π–Ω–∏–π –ø–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–µ–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é –ø—Ä–æ—à–ª–æ–µ –¥–∑ —Å –ê—Ä—Ç–∏—Å—Ç–∞–º–∏

class Artist {
    var name : String
    var surname : String
    var performanceType : String
    
    func performance () -> () {
        print("\(name) \(surname) will \(performanceType) for us")
    }
    
    init (name: String, surname: String, performanceType: String) {
        self.name = name
        self.surname = surname
        self.performanceType = performanceType
    }

}

class Painter : Artist {
    override var name : String {
        didSet {
            super.name = super.name.uppercased() + " üë©‚Äçüé®"
        }
    }
    
    override var surname: String {
        didSet {
            super.surname = ""
        }
    }
    
        init (name: String, surname: String) {
        
        super.init (name: name, surname: surname, performanceType: "paint")
        
        self.name = name.uppercased()
        self.surname = ""
    }
}


class Musician : Artist {
    
        init (name: String, surname: String) {
        super.init (name: name, surname: surname, performanceType: "play music")
        
    }
}

class Dancer : Artist {
        init (name: String, surname: String) {
        super.init (name: name, surname: surname, performanceType: "dance")
    }

}

let artist = Artist(name: "Vasilii", surname: "Pupkin", performanceType: "performance")

let painter = Painter(name: "Grigory", surname: "Slivkin")

let musician = Musician(name: "Mathias", surname: "Aguayo")

let dancer = Dancer(name: "Le", surname: "Dance")

let artists : [Artist] = [artist, painter, musician, dancer]

for artist in artists {
    artist.performance()
}
