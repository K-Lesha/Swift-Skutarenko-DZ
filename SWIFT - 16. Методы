
    // MARK: METHODS
///—Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø –ö–û–ú–ù–ê–¢–ê, –µ—Å—Ç—å –≤—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞
///—Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂, –µ—Å—Ç—å —Ö, –µ—Å—Ç—å y = —ç—Ç–æ –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ, –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É —Å–≤–æ–π—Å—Ç–≤ (–∏–º—è, –µ—â—ë —á—Ç–æ- –Ω–∏–±—É–¥—å)
///—Ñ—É–Ω–∫—Ü–∏—è -)—Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ—Ç –∫–æ–º–Ω–∞—Ç—É –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –Ω–µ–π, –≥—Ä–∞–Ω–∏—Ü—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–Ω—É—Ç—Ä–∏


///–ø–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –∏–¥—Ç–∏: —ç–Ω—É–º –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑
///—Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ moveto ‚Äî –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ, –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
///–ø—Ä–∞–≤–∏–ª–æ ‚Äî¬†–ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã


///—Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø–©–ò–ö, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö –∏ y.
///–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ–π—Ç–∏ –¥–æ —è—â–∏–∫–∞, –∏ —Ç–æ–ª–∫–Ω—É—Ç—å —è—â–∏–∫
///–Ω–æ –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂, –Ω–∏ —è—â–∏–∫ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã


///–¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å , —Ç–æ—á–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–∂—É –Ω—É–∂–Ω–æ —è—â–∏–∫ –¥–æ—Ç–∞–ª–∫–∞—Ç—å

///–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∏–≤ —è—â–∏–∫–æ–≤ –∏ –≤—Å–µ –∏—Ö –¥–æ—Ç–∞—â–∏—Ç—å –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏



// —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–ª–µ—Ç–∫–µ
class Object {
    var coordinate : (x: Int, y: Int)
    var icon : String
    
    init (coordinate: (x: Int, y: Int), icon: String) {
        self.coordinate = coordinate
        self.icon = icon
    }
}// –∫–æ–Ω–µ—Ü —Ç–∏–ø–∞ Object


// —Ç–∏–ø –∏–≥—Ä–æ–≤–æ–π —è—á–µ–π–∫–∏
struct Cell {
    var coordinate : (x: Int, y: Int)
    var object : Object?
    var icon: String {
        get {
            if self.object != nil {
                return self.object!.icon
            } else {
                return "‚¨úÔ∏è"
            }
        }
    }
} // –∫–æ–Ω–µ—Ü —Ç–∏–ø–∞ –∏–≥—Ä–æ–≤–æ–π —è—á–µ–π–∫–∏

// –¢–∏–ø –∏–≥—Ä–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ
struct Room {
    var width : Int
    var lenght: Int
    var room : [Cell] = []
    
    // –º–µ—Ç–æ–¥ Room ‚Äî –°–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∫–æ–º–Ω–∞—Ç—ã
    mutating func create () {
         for n in 1...self.width {
             for m in 1...self.lenght {
                 self.room.append(Cell(coordinate: (x: n, y: m), object: nil))
            }
        }
    }
    
    // –º–µ—Ç–æ–¥ Room ‚Äî –ü–µ—á–∞—Ç—å –ø–æ–ª—è
    mutating func print ()  {
        var tempString = ""
        for element in room {
            tempString.append(element.icon)
        }
        Swift.print( String(tempString.enumerated().map { $0 > 0 && $0 % 10 == 0 ? ["\n", $1] : [$1]}.joined()) )
    }

    
    // –º–µ—Ç–æ–¥ Room ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É –Ω–∞ —è—á–µ–π–∫—É
    mutating func placeToTheRoom (object: Object) {
        for number in 0..<room.count {
            if room[number].coordinate == object.coordinate {
                room[number].object = object
            }
        }
    }
    
    
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
    enum Direction {
        case left, right, bottom, top
    }

    
    // —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ –∫–æ–º–Ω–∞—Ç–µ
    mutating func move(object: Object, direction: Direction) -> Direction? {
        let oldCoordinates = object.coordinate
        
        // –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        switch direction {
        case .left : object.coordinate.y -= 1
        case .right : object.coordinate.y += 1
        case .bottom : object.coordinate.x += 1
        case .top : object.coordinate.x -= 1
        }
        
        // —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã—Ö–æ–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã
        if object.coordinate.y < 1 || object.coordinate.y > 10 {
            object.coordinate.y = oldCoordinates.y
        } else if object.coordinate.x < 1 || object.coordinate.x > 10 {
            object.coordinate.x = oldCoordinates.x
        }
        
        // —É—Å–ª–æ–≤–∏—è –Ω–µ–Ω–∞—Å—Ç—É–ø–∞–Ω–∏—è –Ω–∞ –±–æ–∫—Å
        for cell in 0..<room.count {
            if room[cell].coordinate == object.coordinate {
                if room[cell].object != nil {
                    object.coordinate = oldCoordinates
                    return nil
                }
            }
        }


        // –æ–±–Ω—É–ª—è—é –æ–±—ä–µ–∫—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏
        for cell in 0..<room.count {
            if room[cell].coordinate == oldCoordinates {
                room[cell].object = nil
            }
        }

        // –¥–æ–±–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –Ω–æ–≤—É—é —è—á–µ–π–∫—É
        placeToTheRoom(object: object)
        
        // –≤–æ–∑–≤—Ä–∞—â–∞—é –¥–∏—Ä–µ–∫—à–Ω, –µ—Å–ª–∏ —Ö–æ–¥ –ø–æ–ª—É—á–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞—é –Ω–∏–ª, –µ—Å–ª–∏ —Ö–æ–¥ –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è
        if oldCoordinates == object.coordinate {
            return nil
        } else {
            return direction
        }
        
    } // –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
    
    
    // —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –¥–≤—É—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∫–æ–º–Ω–∞—Ç–µ
    mutating func moveThe(box: Object, by pers: Object, inDir: Direction) -> Direction? {
        
       
        if pers.coordinate.x > (box.coordinate.x + 2) || pers.coordinate.x < (box.coordinate.x - 2) || pers.coordinate.y > (box.coordinate.y + 2) || pers.coordinate.y < (box.coordinate.y - 2) {
            return nil
        } else {
        // –µ—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã, —Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
            if move(object: box, direction: inDir) != nil {
                move(object: pers, direction: inDir)
                return inDir
            } else {
                return nil
            }
        }
    } // –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    
    // —Ñ—É–Ω–∫—Ü–∏—è –∑–∞—Å–æ–≤—ã–∞–Ω–∏—è box –≤ hole
    mutating func putInHole(box: inout Object?, by pers: Object, inDir: Direction) {
        for cell in 0..<room.count {
            if room[cell].coordinate == box!.coordinate {
                room[cell].object = nil
            }
        }
        box = nil
        move(object: pers, direction: inDir)
    }
    
} // –∫–æ–Ω–µ—Ü  –∫–ª–∞—Å—Å–∞ "Room



// –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
// –∑–∞–¥–∞—é —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
var playRoom = Room(width: 10, lenght: 10)
// —Å–æ–∑–¥–∞—é –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
playRoom.create()

// —Å–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
var pers = Object(coordinate: (x: 2, y: 2), icon: "üßîüèª")
// —Å–æ–∑–¥–∞—é —è—â–∏–∫
var box1: Object? = Object(coordinate: (x:2, y:7), icon: "üß∞")
var box2: Object? = Object(coordinate: (x:3, y:7), icon: "üß∞")
var box3: Object? = Object(coordinate: (x:4, y:7), icon: "üß∞")

// —Å–æ–∑–¥–∞—é –¥—ã—Ä—É
var hole = Object(coordinate: (x: 10, y: 10), icon: "üï≥")

// —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
// –¥–æ–±–∞–≤–ª—è—é –æ–±—ä–µ–∫—Ç—ã –≤ –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
playRoom.placeToTheRoom(object: pers)
playRoom.placeToTheRoom(object: box1!)
playRoom.placeToTheRoom(object: box2!)
playRoom.placeToTheRoom(object: box3!)
playRoom.placeToTheRoom(object: hole)

// –ø–µ—Ä–µ–¥–≤–∏–≥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
playRoom.move(object: pers, direction: .right)
playRoom.move(object: pers, direction: .right)
playRoom.move(object: pers, direction: .right)
playRoom.move(object: pers, direction: .right)
playRoom.move(object: pers, direction: .right)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .right)
playRoom.move(object: pers, direction: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.move(object: pers, direction: .left)
playRoom.move(object: pers, direction: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .right)
playRoom.moveThe(box: box1!, by: pers, inDir: .right)
playRoom.moveThe(box: box1!, by: pers, inDir: .right)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .right)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.moveThe(box: box1!, by: pers, inDir: .bottom)
playRoom.putInHole(box: &box1, by: pers, inDir: .bottom)
playRoom.moveThe(box: box3!, by: pers, inDir: .bottom)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .top)
playRoom.move(object: pers, direction: .left)
playRoom.move(object: pers, direction: .left)
playRoom.move(object: pers, direction: .left)
playRoom.move(object: pers, direction: .left)
//playRoom.moveThe(box: box2!, by: pers, inDir: .right)
//playRoom.move(object: pers, direction: .top)
//playRoom.moveThe(box: box1, by: pers, inDir: .right)
//playRoom.move(object: pers, direction: .right)
//playRoom.moveThe(box: box1, by: pers, inDir: .bottom)
//playRoom.moveThe(box: box1, by: pers, inDir: .bottom)
//playRoom.moveThe(box: box1, by: pers, inDir: .bottom)
//playRoom.moveThe(box: box, by: pers, inDir: .bottom)
//playRoom.moveThe(box: box, by: pers, inDir: .bottom)
//playRoom.moveThe(box: box, by: pers, inDir: .bottom)
//playRoom.moveThe(box: box, by: pers, inDir: .bottom)
//playRoom.putInHole(box: box, by: pers, inDir: .bottom)
box1
pers
playRoom.room
// –ø–µ—á–∞—Ç–∞—é –∫–æ–º–Ω–∞—Ç—É
//playRoom.print()



 
