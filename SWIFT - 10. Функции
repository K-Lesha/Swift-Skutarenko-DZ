                     // MARK: –§–£–ù–ö–¶–ò–ò
/// –∏–∑—É—á–∏—Ç—å —á—Ç–æ —Ç–∞–∫–æ–µ  in out –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö

/// —Å–æ–∑–¥–∞—Ç—å 3-4 —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫—É —Å –∫–∞–∫–∏–º–∏-—Ç–æ —Å–∏–º–≤–æ–ª–∞–º–∏.
/// –Ω–∞–ø—Ä —Ñ—É–Ω–∫—Ü–∏—è heart, –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω–µ—Ç —é–Ω–∏–∫–æ–¥ —Å —Å–µ—Ä–¥–µ—á–∫–æ–º
/// –ø–æ—Ç–æ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–Ω—Ç–ª–Ω, —Å–ª–æ–∂–∏—Ç—å –≤—Å—ë –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    

func heartSymb () -> (Character) {
    return "\u{1F496}"
}
func catSymb () -> (Character) {
    return "üê±"
}
func chinaSymb () -> (Character) {
    return "\u{D55C}"
}
func dogSymb () -> (Character) {
    return "üê∂"
}

print ("–Ø \(heartSymb()) \(chinaSymb()) \(dogSymb()) –∏ \(catSymb())")



///–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞—Ö–º–∞—Ç–∞–º. —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: —Å—Ç—Ä–æ–∫–∞ –∏ –∏–Ω—Ç (–∞5, –±6,) , –≤—ã–≤–æ–¥–∏—Ç—å –±—É–¥–µ—Ç —Å–ª–æ–≤–æ "–±–µ–ª–æ–µ" –∏–ª–∏ "—á–µ—Ä–Ω–æ–µ"
///–ª–µ—Ç —Å—Ç—Ä–æ–∫–∞ = —Ñ—É–Ω–∫—Ü–∏–∏
///–ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∏–Ω—Ç

let lettersSequnce = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "x", "y", "z"] // –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—É–∫–≤

func blackOrWhite (letter: String, number: Int) -> String { // —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç –±–µ–ª–æ–µ –∏–ª–∏ —á–µ—Ä–Ω–æ–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    
    func letterToInt (letter: String) -> Int {
        var intOfLetter = 0
                
        for (index, value) in lettersSequnce.enumerated() {
            if letter == value {
                intOfLetter = index + 1
            }
        }
        return intOfLetter
    }
    
    let intOfLetter = letterToInt(letter: letter)
    
    return ((intOfLetter % 2) == (number % 2)) ? "‚¨õ" : "‚¨ú"
}

// –≤—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É

lettersSequnce.count // 23 –±—É–∫–≤—ã
var wide = 8  // —à–∏—Ä–∏–Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è, –±—É–∫–≤—ã, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º lettersSequnce.count
let lenght = 8  // —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—è, —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ, –ª—É—á—à–µ –Ω–µ –±–æ–ª—å—à–µ 68, –∏–Ω–∞—á–µ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è–≤ –∫–æ–Ω—Å–æ–ª—å

var limitedLettersArray: [String] = [] // –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –±—É–∫–≤

for letter in 0..<wide { // —Å–æ–∑–¥–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –±—É–∫–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤—ã—à–µ
    limitedLettersArray.append(lettersSequnce[letter])
}

for letter in limitedLettersArray { // —Ä–∞—Å–ø–µ—á–∞—Ç–∞–ª —à–∞—Ö–º–∞—Ç–Ω—É—é –¥–æ—Å–∫—É –∞1, –∞2, .. –±1, –±2 .. h7, h8
   var tempString = ""
    for numberInSequnce in 1...lenght {
        tempString += blackOrWhite(letter: letter, number: numberInSequnce)
    }
    print (tempString)
}


///—Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤
///—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
///—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç sequense (Int...), —Å–∞–º–∞ –≤—ã–∑—ã–≤–∞–ª–∞ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤

let arrayOfInt = [1, 2, 3, 4, 5, 6, 7, 8, 9]

func inverArray (array: [Int]) -> [Int] {
   
    var tempArray: [Int] = []
    
    for digit in array {
        tempArray.insert(digit, at: 0)
    }
    
    return tempArray
    // array.reversed()
}

let invertedArray = inverArray(array: arrayOfInt)

// –µ—â—ë –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è

func invertRange (range: Int...) -> [Int] {
    var tempArray: [Int] = []
    
    for digit in range {
        tempArray.insert(digit, at: 0)
    }
    
    return tempArray
}

invertRange(range: 1, 2, 3, 4, 5, 6, 7, 8, 9)



///—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤, –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, –Ω–æ –º–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω—ë–Ω (in out)

var arrayToInverse = [1, 2, 3, 4, 5, 6, 7, 8, 9]

func changeArray (reverseArray: inout [Int]) {
    reverseArray = reverseArray.reversed()
}

changeArray(reverseArray: &arrayToInverse)
arrayToInverse

///—Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É,
///–±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –Ω–æ –≤—Å–µ –∑–Ω–∞–∫–∏ –ø—Ä–∏–ø–µ–Ω–∞–Ω–∏—è —É–±—Ä–∞–Ω—ã (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–±–µ–ª—ã), –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –∑–∞–≥–ª–∞–≤–Ω—ã–µ, –≤—Å–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –≤ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ, –∞ —Ü–∏—Ñ—Ä—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–ª–æ–≤–∞
///–≤ –ø–æ–º–æ—â—å switch


let stringToChange = "–ö—É—Ä—Å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–∫—É—Ä—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∞–¥–Ω–æ–≥–æ –º–∏—Ä–∞ —Å –ê–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏. –°–ª—É—à–∞—Ç–µ–ª–∏ —É–∑–Ω–∞—é—Ç –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–æ–π —Ü–∏–ª–∏–∑–∞—Ü–∏–∏, —Ä–∞—Å—Ü–≤–µ—Ç–µ –∏ –ø–∞–¥–µ–Ω–∏–∏ –†–∏–º—Å–∫–æ–π –ò–º–ø–µ—Ä–∏–∏, –æ–± –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –≤ —Ñ–µ–æ–¥–∞–ª—å–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞—Ö, —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤, –∫–æ–ª–æ–Ω–∏–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∏ –≤–µ–ª–∏–∫–∏—Ö –∫—Ä–∏–∑–∏—Å–∞—Ö, –ø–æ—Å—Ç–∏–≥—à–∏—Ö –ï–≤—Ä–æ–ø—É –≤ 20 –≤–µ–∫–µ.\n\t –ö—É—Ä—Å ¬´–ò—Å—Ç–æ—Ä–∏—è –ó–∞–ø–∞–¥–∞¬ª –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç 16 —Ç–µ–º, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ–ª–µ–∫—Ü–∏–π –ø–æ 10-15 –º–∏–Ω—É—Ç. –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫–∞–∂–¥–æ–π —Ç–µ–º—ã —Å–ª—É—à–∞—Ç–µ–ª—è–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –≤–∏–¥–µ–æ–ª–µ–∫—Ü–∏–π. –í –∫–∞—á–µ—Å—Ç–≤–µ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç —Ç–∞–∫–∂–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞."

func change (text: String) -> String {
    var newText = ""
    
    func check(in string: String, forAnyIn characters: String) -> Bool {
        // create one character set
        let customSet = CharacterSet(charactersIn: characters)
        // use the rangeOfCharacter(from: CharacterSet) function
        return string.rangeOfCharacter(from: customSet) != nil
    }

    func digitToString (string: String) -> String {
        let numbers: [String: String] = ["0": "zero", "1": "one", "2": "two", "3": "three", "4": "four", "5": "five", "6": "six", "7": "seven", "8": "eight", "9": "nine"]
        let result = numbers[string]!
        return String(result)
    }
    
    for simbol in text {
        
        let simbol = String(simbol)
        
        switch simbol {
        case ".", "¬´", "¬ª", "-", ",": newText += " "
            case _ where check(in: "–∞–µ–∏–æ—É—ç—é—è–£–ï–≠–û–ê–´–Ø–ò–Æ", forAnyIn: simbol): newText += simbol.uppercased()
        case _ where check(in: "–π—Ü–∫–Ω–≥—à—â–∑—Ö–∂–¥–ª—Ä–ø–≤—Ñ—á—Å–º—Ç–±–ô–¶–ö–ù–ì–®–©–ó–•–ñ–î–õ–†–ü–í–§–ß–°–ú–¢–ë", forAnyIn: simbol): newText += simbol.lowercased()
        case "0", "1", "2", "3","4", "5", "6", "7", "8", "9": newText += digitToString(string: simbol)
        default: newText += simbol
        }
       
    }

    return newText
}

change(text: stringToChange)
